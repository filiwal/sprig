/*
First time? Check out the tutorial game:
https://sprig.hackclub.com/gallery/getting_started

@title: dementia
@author: 
@tags: []
@addedOn: 2025-00-00
*/

const player = "p";
const player2 = "o";
const wall = "v";
const Fwall = "m";

setLegend(
  [ player, bitmap`
................
................
.......000......
.......0.0......
......0..0......
......0...0.0...
....0003.30.0...
....0.0...000...
....0.05550.....
......0...0.....
.....0....0.....
.....0...0......
......000.......
......0.0.......
.....00.00......
................` ],
  [ player2, bitmap`
................
................
.......555......
.......5.5......
......55.5......
......5...5.5...
....5554.45.5...
....5.5...555...
....5.53335.....
......5...5.....
.....5....5.....
.....5...5......
......555.......
......5.5.......
.....55.55......
................`],
    [ wall, bitmap`
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000` ],
  [Fwall, bitmap`
00LL000000000000
000000000L000000
L000000000L0L000
0000L00000000L00
00L00000L0000000
000000000L0000L0
00000L0000000L00
L0L0L00000000000
00000000LL000000
0000000000000L00
00L000000L00L000
00L0LL0000000000
00000L000L000000
00L0000LL0000L00
000L000000000L00
0000000000000000` ],
)

let level = 0
const levels = [
  map`
..........m....
..........v....
..........v....
......vmvvv....
...p..v........
......v....o...
......v........
......v........
......vvvmvv...
...........v...
......vvv..v...
......v.v..v...
......v.vvvv...
......m........
......v........`,
  map`
p
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
o`,
  map`
..........v....
..........v....
..........m....
......vvvvv....
...p..v........
......v....o...
......v........
......m........
......vvvvvv...
...........v...
......vvv..v...
......v.v..v...
......v.vvmv...
......v........
......m........`,
  map`
p
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
o`,
  map`
..........v....
..........v....
..........m....
......vvvvv....
...p..v........
......v....o...
......m........
......v........
......vvvvvv...
...........v...
......vvv..m...
......v.v..v...
......m.vvvv...
......v........
......v........`,
  map`
p
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
o`,
  map`
..........v....
..........v....
..........v....
......vvvvv....
...p..m........
......v....o...
......v........
......v........
......vvvvvv...
...........v...
......vvv..m...
......v.v..v...
......v.vvvv...
......v........
......m........`,
  map`
p
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
o`,
  map`
..........v....
..........v....
..........v....
......vmvvv....
...p..v........
......v....o...
......v........
......v........
......vvmvvv...
...........v...
......vvv..v...
......v.v..v...
......v.vvvv...
......v........
......v........`,
  map`
p
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
o`,
  map`
..........v....
..........v....
..........v....
......vvvvv....
...p..v........
......v....o...
......v........
......v........
......vvmvvv...
...........v...
......vvv..v...
......v.v..v...
......v.vvvv...
......v........
......v........`,
  map`
p
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
o`,
  map`
..........v....
..........v..p.
..........v....
......vmvvv....
...o..v........
......v........
......v........
......v........
......vvmvvv...
...........v...
......vvv..v...
......v.v..v...
......v.vvvv...
......v........
......v........`,
  map`
p
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
o`,
  map`
..........m....
..........m....
..........m....
......mmmmm....
......m........
......m....p...
......m........
......m........
......mmmmmm...
...........m...
......mmm..m...
..o...m.m..m...
......m.mmmm...
......m........
......m........`,
  map`
p
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
o`,
  map`
..........p....
..........p....
..........o....
......ppppp....
...v..p........
......p....m...
......p........
......p........
......ppoppp...
...........p...
......ppp..p...
......p.p..p...
......p.pppp...
......p........
......p........`,
  map`
p
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
o`,
  map`
..........v....
..........v....
..........v....
......vvvvv....
...p..v........
......v........
......v........
......v........
......vvvvvv...
...........v...
......vvv..v...
......v.v..v...
......v.vvvv...
......v........
o.....v........`,
  map`
p
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
o`,
]

const currentLevel = levels[level];
setMap(currentLevel);

setPushables({
  [player]: [player2],
  [player2]: [player],
  [player]: [Fwall],
  [player2]: [Fwall]
})

setSolids([  wall, player , Fwall ]);

onInput("s", () => {
  getFirst(player).y += 1
})

onInput("w", () => {
  getFirst(player).y -= 1
})

onInput("d", () => {
  getFirst(player).x += 1
})

onInput("a", () => {
  getFirst(player).x -= 1
})


afterInput(() => {
  const player1 = getFirst(player);
  const otherPlayer2 = getFirst(player2);
  
  if (player1 && otherPlayer2 && player1.x === otherPlayer2.x && player1.y === otherPlayer2.y) {
    level = (level + 1) % levels.length; // Cycle through levels
    setMap(levels[level]);
  }

});